 E aí a questão é o seguinte, nessa tabela aqui a gente tem as classes que tem aquela coletiva total maiores, porque eu organizei aqui pelo maior, e aí a gente tem essa outra classe aqui, detalhe de projeto tem 30, tem aqui link de membro, que eu não sei o que significa muito, projeto form, enfim. E aí eu tenho essa outra coluna aqui que eu estou vendo se elas estão dentro do limite. E aqui nessa primeira eu determino que se o limite estiver igual ou menor que 30, então ela está dentro do limite. No caso essa daqui. Ela tem 30, então ela está dentro do limite. Caso não ela vai ser falso, então essas três classes aqui estão fora do limite de CP que a gente definiu inicialmente. E aí é só a gente observar que tem na verdade três classes aqui que estão fora do limite. Só que aí qual é a minha proposta que eu estou fazendo aqui para essa semana? É que a gente diminua o limite bastante, pela metade. Ou seja, a gente vai... A gente vai fazer uma repaturação para que todas as classes fiquem dentro do limite igual ou menor que 15, porque 15 é o número total de CPs. Então a ideia é que, sei lá, que a gente tenha uma classe que ela tenha um de cada um desses itens aqui. Só um exemplo, claro que não vai ser assim, né? Então ela vai ter uma branch, um acoplamento, uma opção assíncrona, um índice assíncrono, um estado. E um... Como é? Um estado e uma animação. E ela teria ali 15 pontos de CP. E aí a ideia não é que a gente coloque a questão dos widgets básicos, porque a gente não vai tratar essa parte do layout e tudo mais. E talvez tirar esse widget animado aqui, porque a gente não vai usar isso. Então, vamos lá. Vamos lá. Vamos lá. Vamos lá. O que é que vocês acham? Interessante. Tá bom, né? Então a gente só trabalharia a parte do layout mesmo. E aí a gente teria que trabalhar dentro dessas 10 classes aqui, ó, refatorar essas 10 classes. Obviamente, isso vai fazer com que, por exemplo, no momento a gente tem 45, 45 não, né? 44. Isso faria com que a gente tivesse mais classes, né? Porque, por exemplo, main app vai se transformar em mais uma ou mais duas classes. Detalhes da demanda também. Se eu não me engano, eu acho que detalhes da demanda tem dois provider, tem dois stream, se eu não me engano. Eu vi uma classe que era assim, que tinha vários provider. Oi? É, eu já li. É, eu já li. eu acho que é muito detalhado isso é porque eu já esqueci pois é, e aí essa que é a questão, né, é voltar lá no código lembrar porque aquela pessoa fez isso né, porque eu fiz isso, qual era a minha lógica e aí você tentar repensar uma lógica porque, ó, imagina que a gente coloca uma pessoa nova nesse projeto e ela tem que fazer aqui uma manutenção dessa demanda de detalhes a gente voltou bastante nessa classe, né é se ela for ler esse código aqui ela vai demorar bastante pra entender o que ele faz e tudo mais aí fica mais difícil fazer uma manutenção aqui, por exemplo e aí a ideia é que a gente tenha classes, por exemplo, imagina aqui uma classe com com tamanho, sei lá razoável, aqui, ó é, start project onde é que fica isso? aqui, ó tem essa classe que ela é até, assim, né razoavelmente grande, mas ela tem 143 linhas então ela tem 143 linhas, tem 14 pontos de CP então provavelmente a possibilidade de eu entender ela mais rápido é grande, porque o CP dela é pequeno, né, 14 então, se a gente manter as nossas classes dentro de 14 15, né, dependendo da quantidade de CPs que a gente vai definir ali todas as classes serão pequenas elas terão aqui, ó 143, 150 linhas você não teria uma classe, né de 474 linhas né então a ideia é essa se a gente reduzir bastante o CP porque esse aqui já estourou o CP mesmo que fosse 30, né teria que tirar 8 pontos de CP daqui de alguma maneira então, a gente vai ter que tirar 8 pontos de CP e aí a ideia é que a gente trabalhe em cima desse limite aqui, ó que é o do igual 15 igual menor que 15, na verdade o que vocês acham aí desse desafio? eu acho que é bem legal é também acho é é basicamente o que a gente vai fazer deixa eu ver aqui é porque geralmente essa estrutura aparece em em bibliotecas, né mas por exemplo, vocês podem pesquisar aí como estruturar como não, arquitetura arquitetura de pastas pode ter e aí, né, vai ter várias pessoas várias pessoas várias pessoas falando de várias arquiteturas é não, essa daqui é outro rolê estruturando um projeto foda aí, enfim, ó aqui o cara vai falar sobre ó, ali tem blocos, modelos, repositórios e aí vão ser várias dicas e não sei o que tarará e aí no final, quando a gente escolhe uma alguma arquitetura pra seguir é, ó, por exemplo aqui ele tem ele tem uma arquitetura diferente também é, ele tá por representações domínios e dados e aí, ó como vai ficar a pasta dele ... enfim, tem vários tem muita coisa sobre esse assunto e aí o que acontece geralmente a gente quando a gente define alguma coisa a gente faz a arquitetura disso, né imagina eu vou ter, ó, gente, o seguinte então imagina que a gente tá aqui no no... na raça de arquitetura, né? Então imagina que a gente tá aqui no... na raiz então a gente vai ter modelos que a gente vai colocar as entidades a gente vai ter screens que a gente vai colocar telas do usuário a gente vai ter serviços que a gente vai ter opa, eu não engolir na ss que a gente vai ter é... serviços de... ...de... banco de dados é... é... dispositivo dispositivo, etc aí a gente vai ter a gente vai ter as utilidades, né utilidades utilidades do sistema não, do código ... ... ... ... ... vamos supor que você tenha ali um um... um... um... unjacks você tem ali um sei lá, um... uma coisa pra converter arquivo json sei lá alguma coisa algumas utilidades básicas e aí , por exemplo, aqui nas screens a gente pode ter o seguinte a gente vai fazer a gente vai fazer por módulo vamos supor só um exemplo, né? não precisa ser assim a gente faz por módulo ou seja imagina que você tem ali o aluno, então vou ter o aluno e aí dentro desse aluno eu vou ter o nome da tela nome da tela beleza? só que eu vou ter também uma outra pasta chamada component que nessa pasta eu coloco os componentes que eu vou reutilizar em outros lugares imagina ali um avatar do perfil do usuário aí eu coloco aqui né avatar profile user ponto da arte, aí aquele é o nome do arquivo isso vai estar dentro de component que eu reutilizo dentro do aluno dentro da pasta do aluno só um exemplo e aí quando a gente definir a gente vai fazer essa estruturazinha aqui vai comentar ela aí é só seguir, entendeu? ah, tem um componente que eu uso ali depois dentro da tela do projeto eu reutilizo no projeto eu reutilizo no detalhe do projeto também eu reutilizo em sei aonde beleza, qual é a pasta que liga todos esses dois arquivos que eu estou fazendo? ah, é a pasta projetos então eu crio uma pasta chamada component dentro da pasta projeto e lá dentro tu coloca esse componente deu pra entender? deu pra entender? é só um exemplo é só um exemplo é só um exemplo tipo de como que pode ser mas no fim das contas a gente não, o a ideia de como vai ser exatamente não precisa ser essa que eu estou falando estou dando um exemplo mas o que eu estou dizendo é que a gente vai ter por exemplo, pode ser no readme do projeto a gente vai ter algum lugar dizendo como que é a arquitetura entendeu? a pasta model a pasta model vai ter isso, aquilo, aquilo a gente vai ter a pasta screen a pasta screen vai ter isso, isso, isso a gente vai ter a pasta service a pasta service vai ter isso, aquilo, aquilo e aqui eu estava explicando como que a gente poderia gerenciar esses componentes que são reutilizados por exemplo, utilizando a pasta component que aí a gente pode colocar dentro de alguma pasta dependendo de aonde a gente reutiliza esses componentes só que a ideia de colocar componentes aqui na pasta principal como está sendo feito aqui por exemplo aqui estou na pasta na pasta lib na pasta lib eu tenho uma pasta chamada component isso daqui não é muito não é muito legal porque você porque você não sabe muito bem onde fica onde eles estão sendo reutilizados e aí no caso de quando você, vamos supor eu tenho a pasta screens deixa eu separar bem aqui eu tenho a pasta screens dentro dessa pasta screens eu tenho a pasta alunos e aí dentro dessa pasta alunos eu tenho, sei lá, aluno ou detalhes de aluno né e aí eu tenho algum componente que eu que eu criei lá dentro de detalhes de aluno aí eu vou componentizar essa coisa, aí eu crio uma pasta chamada component e essa pasta component eu vou ter um outro arquivo chamado, sei lá avatar do aluno e aí eu reutilizo isso aqui dentro, mas pode ser que eu crie um outro arquivo, sei lá é é, editar editar perfil do aluno e aí esse avatar, esse avatar aqui do aluno, eu vou utilizar tanto dentro de detalhes do aluno quanto editar perfil do aluno então como eu utilizo só aqui dentro desses dois eu crio essa pasta component dentro da pasta aluno e coloco o avatar do aluno dentro dessa pasta deu pra entender isso aqui? entendi então o componente era só pra aquela pasta isso, aí aí eu tenho um outro eu tenho aqui, é, gerente mesma coisa, eu vou ter uma pasta chamada component e aqui eu vou ter detalhes do detalhes do gerente e aí vamos supor que lá dentro eu tenha alguma outra coisa sei lá, só que aí é uma coisa a se pensar agora vamos supor que eu tenho esse aqui, avatar do aluno só que esse avatar do aluno eu também posso utilizar aqui dentro do detalhes de gerente então o que que eu faço? eu tiro essa pasta daqui e eu coloco dentro do que é comum nas duas pastas que é a pasta screen então a pasta screen pode ter uma pasta component que vai ter, sei lá, o avatar avatar do usuário e aí eu utilizo o avatar do usuário tanto dentro de aluno quanto dentro de gerente, aqui eu não vou precisar mais disso deu pra entender? então isso aqui eu utilizo dentro de screen, porque screen é onde tem um aluno e onde tem um gerente só que quando eu coloco o component aqui, por exemplo eu não vou utilizar o component dentro do model, eu não vou utilizar o component dentro do service, então não faz sentido ela ficar aqui o ideal é que ela fique na raiz da onde eu vou começar a usar ela deu pra entender? tem dá pra entender exato, e aí a gente vai fazer aqui hoje mesmo já vai ter, a gente já vai definir essa arquitetura, até aí, sei lá o final do dia, e a gente vai botar lá no readme, fazer ali uma discussão no whatsapp, vocês tiram as dúvidas ah, não entendi essa parte aqui e tal e a gente estrutura pra esse tipo tá, então a primeira coisa é mudar esse service aqui então a gente já tem uma pasta service que faz sentido service, só que não faz sentido é a maneira como ela tá escrita então transformar isso aqui numa classe de serviço mesmo seguindo o padrão comum de serviço tirar aqui desse provider essas funções que vão no banco de dados, isso daqui não vai mais no banco de dados, isso daqui quem vai fazer vai ser o service tá, mas calma, isso aqui pode ser por último, porque tá funcionando e tudo mais acho que o mais importante por enquanto é repatorar as classes ali, e aí a gente pode deixar por último essa parte de arrumar os providers e os serviços, e desacoplar a responsabilidade deles cada um ter a sua própria responsabilidade é estruturar a arquitetura estruturar a arquitetura acho que é isso mas a gente vai ao longo do dia, colocando lá no whatsapp, falando como é que vai ser as coisas, no momento que a gente pode fazer essa discussão aqui do, da tabela de CP se realmente a gente vai fazer isso de colocar, além de colocar o dobro da carga cognitiva colocar o somatório, porque no caso aqui dá 15, mas a gente colocou 30 porque era o dobro, porque é o dobro de cada um então, algumas alguns trabalhos de CDD fazem isso, eles dão o dobro só que eu acho que naquele contexto é uma coisa o nosso contexto é diferente então a gente percebe olhando aqui, até fiz um gráfico pra ver uma dispersão das classes isso daqui são a complexidade e isso daqui é o número de linhas então você vê que tem classes com muitas linhas e com uma complexidade muito grande e aí a nossa distribuição é perante a o projeto inteiro, é uma dispersão muito alta claro, tem uma pequena concentração aqui, e a ideia é que a gente vá puxando todo mundo pra cá, que a gente concentre todo mundo aqui o gráfico essa tabela final de dispersão que a gente quer que a gente não esteja concentrado tudo aqui dentro que tire esses caras aqui daqui, e tragam eles mais pra cá e aí essa daqui é assim, é parecida mas é só pra vocês verem que essa parte azul da barra é o número de linhas e essa parte aqui verde, laranjado ou, verde não, é laranjado ou amarelo, sei lá é a complexidade então aqui você consegue ver que quanto maior são as linhas de código, maior é a complexidade da classe então, se a gente quer diminuir a complexidade da classe, a gente tem que manter elas com quantidade de linhas menores, então essa é a ideia então se a gente vai pra 15 de ICP, a ideia é que a gente fique por aqui e que essa dispersão diminua pra cá beleza? e aí o que vocês acham da gente tirar aqui o edit animado? acho que esse tipo de foi usado no código mas não sei dizer porque eu também não usei essa marca é porque a ideia é que o é o João Pedro o Alohany trabalhasse essa parte, né mas essa parte de animação ela é uma parte assim, também meio chata porque requer muito muito tempo da pessoa, de fato você vai fazer uma animação de uma tela você tem que ir lá, ficar testando ficar vendo como que vai como que a animação vai interagir às vezes, até quando você precisa fazer uma animação muito complexa, você tem que desenhar assim, desenhar entre aspas, né fazer quase quadro a quadro porque o float ele é 60 fps 60 frames por segundo e às vezes você tem que desenhar frame por frame aquilo que você precisa fazer agora imaginando uma tela dessa assim, a a quantidade de código é absurdamente alta então é uma parte assim que talvez depois que eu coloquei aqui a animação é implícita e explícita que na animação é implícita e explícita, basicamente o float está ali, não tem muitas dificuldades às vezes você só tem um controlador da animação, mas quando você tem, por exemplo, um que é o Paint, Custom Paint não sei se você já viu essa classe ela você vai ter que configurar várias coisas ali da classe, aí fica muito difícil você coloca o controlador, mas você trabalha outras partes, você trabalha com a classe Animation trabalha com a classe Twin Twin Animation também então são muitas configurações, enfim a classe deve ficar ela fica bem grande mesmo, mas como a gente não vai trabalhar nem o o João Pedro está numa fase de vai fazer o Enem está bem ocupado, o Lourenço está fazendo mestrado então essa galera aí do front que ia trabalhar não deu para eles, então é não deu para explorar muito essa parte do front de design e tudo mais, infelizmente mas uma próxima oportunidade talvez a gente consiga estudar mais sobre isso então a ideia é essa é que a gente tira aqui porque a gente vai estar focado nas funcionalidades mesmo é, quer dizer e aí é só que talvez no futuro ela volte é, sim, sim é porque a não ser que o João Pedro chegue até o final do dia e fale que ele vai que ele vai fazer repaturação também e aí a gente pode voltar mas se ele não fala nada eu vou tirar agora uma coisa que eu estou que eu estou é uma parte assim que está muito está muito cinzento na minha cabeça é a parte de coluna mesmo row, column e tudo mais é, por exemplo eu não sei se o que torna uma classe é muito com linha de código muito grande é justamente a quantidade de as vezes coluna row que você coloca ali dentro da classe se é ela que seria responsável por tornar esse lock dela muito grande, né essa linha de código muito grande porque por exemplo se a gente coloca aqui ó por linha de código é, você percebe que por exemplo a gente tem essa classe aqui ó que ela tem 226 linhas de código mas a carga cognitiva dela é 12 a outra tem 225 e a carga cognitiva dela é 22 então na minha cabeça eu estou pensando em entender é, sobre essa relação entre carga cognitiva da classe e linha de código porque no fim das contas a ideia também é diminuir o número de linhas de uma classe, se uma classe tem muita linhas, ela é difícil de entender só que se eu tenho uma classe que tem muitas linhas e que a complexidade dela não aumenta aí eu tenho um problema, porque eu não estou quantificando direito a complexidade então o meu medo nessa pesquisa é deixar passar isso como é que você vê isso, por exemplo o trabalho de um pessoal de Java quer dizer, eu sei dizer a maioria, todos os trabalhos até aqui foram em Java mas em equipes só que assim, todo mundo era senho eram especialistas a galera era muito braba mesmo e eles trabalhavam com outras métricas eles trabalhavam com aparecia o código e assim, eles trabalhavam com o código e assim, eles trabalhavam com por exemplo, número de linha de código trabalhavam coesão da classe acoplamento e coesão da classe eles trabalhavam com como é que é o nome é o peso da classe eles trabalhavam também uma parte de como é que chama? a parte de herança da classe, se uma classe tinha uma ela tinha uma profundidade muito grande vamos supor era uma classe que estendia uma classe sendo que essa classe já estendia uma outra classe e assim sucessivamente era também uma outra forma então não tem exatamente um um item que é o certo e que é o errado depende muito da equipe como a gente está uma equipe que está começando ninguém é senho por exemplo esse tipo de métrica mais complexa não caberia aqui mas você pode usar qualquer tipo de métrica por exemplo, linha de código pode ser uma métrica só que a ideia pode falar se no cdd se no cdd não vou dizer cdd mas se no cdd também no industrial diminuir o número de linhas então não faz sentido colocar contabilizar o código porque por exemplo tem uma parte que o João Pereira fez que montou várias colas várias lojas que era só para mostrar os detalhes da demanda e aí isso aí a gente pode fazer umas 40 linhas entendeu sim só que a estrutura só que a estrutura da colo não tinha nada de como era só um código de colo para mostrar para vocês pois é, aí a pergunta que tem que ser se fazer é se quando a gente tem uma classe com, por exemplo é olhar para essas duas é olhar para essas duas classes são classes com linhas aproximadas, vamos dizer com a mesma quantidade de linha dado que é 225, 226, vamos dizer que mesma quantidade de linha que uma tem quase a metade da complexidade da outra aí vale a pena a gente observar essas duas classes e entender se faz sentido essas carreiras cognitivas entendeu porque então eu coloco uma classe que ela tem 200 linhas a outra tem 200 linhas só que uma tem complexidade baixa e a outra tem complexidade alta e a gente também na verdade esse plano na outra também tem um projeto de teios e um sign in projeto de teios tem 313 tem 30 pontos de CP e o sign in tem 296 aproximadamente igual e falta 16 pontos pois é, então seria essas duas com as duas de cima então seria olhar ali para essas duas classes e ver se realmente por exemplo essa edit create the main essa edit create the main ela ela tem muitas linhas mas ela realmente é muito fácil de entender essa outra aqui ela tem muitas linhas e ela tem muito tempo é difícil de entender se é só que tem que tirar da cabeça na hora que a gente olhar para essas classes tem que tirar da cabeça a quantidade de CP a quantidade de sign in só olha para a classe e percebe ela é difícil de entender mesmo porque se as duas se você tirar da cabeça a CDD a gente está falando de de dificuldade para entender a classe a complexidade da classe a legibilidade da classe se é fácil ler ela ou se ela é muito complexa ela requer que você navegue muito pelos códigos ela requer que você entenda muitos conceitos entendeu então olhar para as duas classes esquecendo tudo e primeiro responder não, realmente elas tem a mesma quantidade de linha mas elas são uma é muito mais complexa do que a outra porque é quase o dobro então ela tem que ser bem mais complexa do que a outra então acho que é o primeiro exercício que a gente precisa fazer Oi eu acho que a gente pode fazer mais de 8 dias eu imagino que a complexidade dela é para alto porque eu não usei o ByteD e o Word eu usei o Word normal aí ele tem que passar muita função de estar ali eu imagino que ele pode ser igual é, pode ser mas aí, pois é a gente tem que olhar e ver se se a legibilidade é isso é isso então é uma coisa que eu vou voltar aí durante o dia eu vou organizar essas duas classes para vocês olharem elas assim tirem uns 10 minutos para ver cada uma das classes e tipo pensar sobre ah não, essas classes aqui uma é assim a outra é assada e a gente faz a comparação e aí a gente pode chegar no consenso o número de linhas da classe ela não determina a complexidade dela de fato e aí a gente pode eliminar a questão de colocar column row como um ifp caso não é, é, é, é, é tipo assim, eu vi agora né que essa é a elite query demand que eu fiz e nessa elite query demand na verdade ela poderia ser dividida em três partes porque na verdade ela já é dividida em três partes três partes, ela já está tudo no mesmo no mesmo no mesmo negócio contrário deu? deixa eu ver onde é que ela fica qual é que é a classe mesmo? já esqueci elite query é form né? ou não? é demand é forms aí demand e na verdade forms tu vai ver que eu criei é eu criei duas classes na mesma coisa só para ter dividido ah tá, mas acho que a gente tem uma questão também aqui ah não, mas na verdade ela já é a questão de ah mas ela já é a questão de coloques de exágeno total ah tá, ah tá não, mas tipo tá somado, tá tipo assim a carga do índice vai dar 28 depois da 7 aí da elite query demand tá aqui né, tá somado, tá 22 mas se dividisse uma ia ficar com 7 e a outra ia ficar com 15 calma aí não entendi porque tipo assim nessa daí é tem duas classes na verdade é duas é e a carga coloctiva total mas pelo menos o que tá aqui em cima, tô vendo agora tá com pontos, tá com total de 7 cp tem uma outra logo embaixo que é chamada limit demand, que ela tá com 15 aí aí nesse teu no teu excel, ela tá com 22 que é justamente a soma entre 15 mais 7 aí se a gente separar não, sabe porque eu acho que faltou estudar o git pull aí ela tem 22 mesmo o link demand tem 22 a a elite query demand tem 12 ah então esquece o que eu falei é estranho tá beleza é tá aqui ó justamente é é justamente é bom que tá tudo no mesmo no mesmo arquivo né as duas classes que a gente quer comparar então porque que calma, deixa eu ver é elite query ah não a outra é elite query é outra, é project form é na mesma pasta aí ah é de baixo ah tá aqui então é o que eu imaginava é porque o meu formulário né então por ser um formulário, não tem muito como abstrair isso aqui ó quer dizer quer dizer pode ser até que teria se eu usasse algum pacote acho que seria mais fácil igual o pessoal do form ou ele prefere a de novo não, não é, é porque é porque mesmo que aqui fosse um text form field mesmo sem ser um um ou um text form field block que é o que tu vai usar o form lá, tu teria que repetir essas essas caras aqui de qualquer maneira então é um é um é porque tem um formulário né então eu acho que é essa que é a diferença entre essas classes é porque o formulário ele não necessariamente torna uma classe complexa ele só aumenta o número de linhas de fato tá mas eu acho que cada pessoa tem que fazer a observação e tirar a sua conclusão e a gente depois chegar num consenso beleza então eu vou atualizar essa tabela aqui colocar a quantidade né, só que no caso vai cair pra 14 né se eu tirar esse cara aqui e aí ficaria deixa eu ver 14 é não ia mudar não porque esses caras aqui estavam 14 ia continuar sendo isso aqui quer ver deixa eu logo alterar aqui beleza então vai ser 14 na verdade né saindo esse cara aqui e só falta a gente ver se vai considerar o column column row list view por exemplo e aí se considerar a gente volta pra 15 mas por enquanto tá sem ele acho que é isso mais alguma consideração de alguém tá beleza aí eu vou eu vou junto com o Enzo a gente vai ver a questão da arquitetura da pasta quando a gente escolher a gente vai também dar um texto ou algum algum artigo pra vocês verem artigo tipo um blog da vida desses pra vocês verem sobre essa arquitetura que a gente vai usar seja form block, seja por componentização coisa do tipo e aí a gente pode botar lá no readme como é a estrutura de pasta pra vocês entenderem e tal, mas a ideia hoje é só fazer essa organização e a partir de amanhã que a gente começa a fazer uma fatoração de código de fato beleza beleza beleza beleza e aí eu vou eu vou colocar no eu vou separar do do projeto essas duas classes não olhem dentro do do visual code porque eu quero que vocês estejam, olhem num lugar mais tranquilo, por exemplo olhem em duas abas cada uma das duas classes que a gente quer comparar aí pensem na primeira classe, pensem na segunda vê se a complexidade delas fazem sentido, se a quantidade de linha tá impactando mesmo ou não tá, pode ser que sim, pode ser que não a gente só quer saber é se pra equipe impacta ou não não existe uma verdade, existe uma verdade vamos dizer assim, da equipe, da gente a nossa verdade é que ela tá impactando ou não, não tá, então pronto então não precisa, beleza? beleza beleza beleza então até meio dia eu vou estar mandando esses dois links vou mandar a tabela atualizada e aí se precisar atualizar lá no fim do dia caso a gente considere atualizo de novo e mando de novo beleza, e aí dá um git pull aí no projeto, aí vocês vão dando uma olhada sobre como pra se acostumar com o padrão dos comentários e até observar onde colocar o ICP pra não esquecer enfim, durante o processo de repaturação beleza? beleza então é isso, muito obrigado aí por fazerem parte dessa semana aí até qualquer momento aí falou, falou, até mais falou